name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Construir imagen Docker para escaneo
      - name: Build Docker image
        run: |
          docker build -t techwave-api:latest -f docker/dockerfile.api .

      # Configurar Snyk
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --all-projects

      # Escanear Dockerfile
      - name: Run Snyk Container
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: techwave-api:latest
          args: --file=docker/dockerfile.api

      # Escanear Terraform
      - name: Run Snyk IaC
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: terraform/

  build-and-push:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Configurar AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Crear bucket S3 para estado de Terraform si no existe
      - name: Create Terraform state bucket
        run: |
          if ! aws s3api head-bucket --bucket techwave-terraform-state 2>/dev/null; then
            aws s3api create-bucket \
              --bucket techwave-terraform-state \
              --region us-east-1

            # Habilitar versionado
            aws s3api put-bucket-versioning \
              --bucket techwave-terraform-state \
              --versioning-configuration Status=Enabled

            # Habilitar cifrado
            aws s3api put-bucket-encryption \
              --bucket techwave-terraform-state \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'
          else
            echo "Bucket already exists"
          fi

      # Configurar Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Crear repositorios ECR
      - name: Create ECR Repositories
        run: |
          cd terraform
          terraform init -target=aws_ecr_repository.app -target=aws_ecr_repository.web
          terraform apply -target=aws_ecr_repository.app -target=aws_ecr_repository.web -auto-approve

      # Login a ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Verificar existencia de repositorios ECR
      - name: Ensure ECR repositories exist
        run: |
          REPOS=("techwave-api" "techwave-web")
          for REPO in "${REPOS[@]}"; do
            echo "Verificando si el repositorio $REPO existe en ECR..."
            if ! aws ecr describe-repositories --repository-name $REPO > /dev/null 2>&1; then
              echo "Error: El repositorio $REPO no existe."
              exit 1
            else
              echo "Repositorio $REPO existe."
            fi
          done

      # Construir y subir imagen Docker con mejor verificación
      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          REPOS=("techwave-api" "techwave-web")
          # Generar un timestamp único
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          for REPO in "${REPOS[@]}"; do
            echo "Construyendo y subiendo imagen para $REPO..."
            # Usar múltiples tags: latest, commit SHA, y timestamp
            IMAGE_TAG="${{ github.sha }}-${TIMESTAMP}"
            
            docker build -t $ECR_REGISTRY/$REPO:$IMAGE_TAG -f docker/dockerfile.${REPO##techwave-} .
            docker tag $ECR_REGISTRY/$REPO:$IMAGE_TAG $ECR_REGISTRY/$REPO:latest
            
            # Subir ambas versiones
            echo "Subiendo imagen con tag específico: $IMAGE_TAG"
            docker push $ECR_REGISTRY/$REPO:$IMAGE_TAG
            echo "Subiendo imagen con tag latest"
            docker push $ECR_REGISTRY/$REPO:latest
            
            echo "Imagen para $REPO subida a ECR con éxito."

            # Nueva forma de verificar la imagen
            echo "Verificando la disponibilidad de la imagen..."
            MAX_RETRIES=5
            RETRIES=0
            
            while [ $RETRIES -lt $MAX_RETRIES ]; do
              if aws ecr describe-images \
                --repository-name $REPO \
                --image-ids imageTag=$IMAGE_TAG \
                --query 'imageDetails[0].imageTags' \
                --output text > /dev/null 2>&1; then
                echo "✅ Imagen verificada exitosamente en ECR"
                break
              fi
              
              echo "Intento $((RETRIES+1)) de $MAX_RETRIES: Esperando que la imagen esté disponible..."
              RETRIES=$((RETRIES+1))
              
              if [ $RETRIES -eq $MAX_RETRIES ]; then
                echo "⚠️ No se pudo verificar la imagen, pero continuando ya que el push fue exitoso..."
                break
              fi
              
              sleep 10
            done

            # Verificación final usando el digest
            DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $ECR_REGISTRY/$REPO:$IMAGE_TAG || echo '')
            if [ ! -z "$DIGEST" ]; then
              echo "✅ Imagen confirmada en ECR con digest: $DIGEST"
            fi
          done

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Configurar Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Configurar AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Crear bucket S3 para estado de Terraform si no existe
      - name: Create Terraform state bucket
        run: |
          if ! aws s3api head-bucket --bucket techwave-terraform-state 2>/dev/null; then
            aws s3api create-bucket \
              --bucket techwave-terraform-state \
              --region us-east-1

            # Habilitar versionado
            aws s3api put-bucket-versioning \
              --bucket techwave-terraform-state \
              --versioning-configuration Status=Enabled

            # Habilitar cifrado
            aws s3api put-bucket-encryption \
              --bucket techwave-terraform-state \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'
          else
            echo "Bucket already exists"
          fi

      # Desplegar con Terraform
      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="bucket=techwave-terraform-state"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve